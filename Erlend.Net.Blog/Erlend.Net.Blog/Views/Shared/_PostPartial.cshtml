@model Erlend.Net.Blog.Core.Models.Post
<div class="heading-container">
    <a href="#">
        <a href="@Url.Action("Post", "Blog", new { id = Model.Id })">
            <h2>@Model.Title</h2>
        </a>
    </a>
</div>
<div class="postinfo-container">
    <p class="postinfo">
        Erlend Røsjø
					<br />
        @Model.PublishedDate
    <p>
    <p class="postinfo">
        <a href="@Url.Action("Post", "Blog", new { id = Model.Id })#disqus_thread"></a>
    </p>
</div>
<div class="post-container">
    @Html.Raw(Model.Content)
    @*        <p>
            Over at <a href="#">Daring Fireball</a> yesterday, John Gruber waxed rhapsodic about his lifelong relationship with pixels, and their marginalization in the new MacBook Pro Retina Display. He then talked about fonts in that context:
        </p>
        <blockquote>
            Regarding font choices, you not only need not choose a font optimized for rendering on screen, but should not. Fonts optimized for screen rendering look cheap on the retina MacBook Pro — sometimes downright cheesy — in the same way they do when printed in a glossy magazine. [...] Great fonts, intricately designed for high-resolution output, aren’t just allowed, they are necessary for a design that truly sings on this display.
        </blockquote>
        <pre><code>Shutdown.exe -s -t 00</code></pre>
        <p>John is talking about the long game of type design that Adobe has been practicing and advocating for over 25 years — especially in the last two or three years as screen fonts (a.k.a. web fonts) have taken a front seat in designer workflows and font foundry business planning. While there’s nothing wrong with finding the perfect solution to a contemporary problem — as many foundries have sought to do with highly screen-optimized fonts — it’s an endeavor that takes a lot of time and resources, always with the looming threat that those benefits will be fleeting. At Adobe, we’ve always been very comfortable relying on the inherent value of type designed to work well in print and high-resolution environments. No doubt that is a conservative choice, but keep in mind that Adobe Type has always been a product for digital workflows. One of the first Adobe Originals, Adobe Garamond, was designed in consideration, not defiance, of the 300 dpi laser printers of its time. Doing so did not make it incongruous with the past or the future.</p>
        <p>
            I’m looking forward to the day when this bifurcation, “fonts” and “web fonts,” disappears and we can get back to simply practicing good typography with good typefaces, and worrying less about the medium and the technology. Although it seems like we’ve been anticipating high resolution screens for at least fifteen years, perhaps we are, finally, almost there.	
        </p>*@
</div>
@if (ViewBag.SinglePost == true)
{
    <div id="disqus_thread"></div>
    <script type="text/javascript">
        var disqus_shortname = 'erlendnet';

        (function () {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
}
    <script type="text/javascript">
        var disqus_shortname = 'erlendnet';

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function () {
            var s = document.createElement('script'); s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
    </script>